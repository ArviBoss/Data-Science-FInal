{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Pyolite",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "<p style=\"text-align:center\">\n    <a href=\"https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork971-2022-01-01\" target=\"_blank\">\n    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\"  />\n    </a>\n</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "# House Sales in King County, USA\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "| Variable      | Description                                                                                                 |\n| ------------- | ----------------------------------------------------------------------------------------------------------- |\n| id            | A notation for a house                                                                                      |\n| date          | Date house was sold                                                                                         |\n| price         | Price is prediction target                                                                                  |\n| bedrooms      | Number of bedrooms                                                                                          |\n| bathrooms     | Number of bathrooms                                                                                         |\n| sqft_living   | Square footage of the home                                                                                  |\n| sqft_lot      | Square footage of the lot                                                                                   |\n| floors        | Total floors (levels) in house                                                                              |\n| waterfront    | House which has a view to a waterfront                                                                      |\n| view          | Has been viewed                                                                                             |\n| condition     | How good the condition is overall                                                                           |\n| grade         | overall grade given to the housing unit, based on King County grading system                                |\n| sqft_above    | Square footage of house apart from basement                                                                 |\n| sqft_basement | Square footage of the basement                                                                              |\n| yr_built      | Built Year                                                                                                  |\n| yr_renovated  | Year when house was renovated                                                                               |\n| zipcode       | Zip code                                                                                                    |\n| lat           | Latitude coordinate                                                                                         |\n| long          | Longitude coordinate                                                                                        |\n| sqft_living15 | Living room area in 2015(implies-- some renovations) This might or might not have affected the lotsize area |\n| sqft_lot15    | LotSize area in 2015(implies-- some renovations)                                                            |\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "If you run the lab locally using Anaconda, you can load the correct library and versions by uncommenting the following:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# All Libraries required for this lab are listed below. The libraries pre-installed on Skills Network Labs are commented.\n# !mamba install -qy pandas==1.3.4 numpy==1.21.4 seaborn==0.9.0 matplotlib==3.5.0 scikit-learn==0.20.1\n# Note: If your environment doesn't support \"!mamba install\", use \"!pip install\"",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": " # Surpress warnings:\ndef warn(*args, **kwargs):\n    pass\nimport warnings\nwarnings.warn = warn",
      "metadata": {
        "trusted": true
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "You will require the following libraries:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "import piplite\nawait piplite.install(['pandas','matplotlib','scikit-learn','seaborn', 'numpy'])\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n%matplotlib inline",
      "metadata": {
        "trusted": true
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "# Module 1: Importing Data Sets\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "The functions below will download the dataset into your browser:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from pyodide.http import pyfetch\n\nasync def download(url, filename):\n    response = await pyfetch(url)\n    if response.status == 200:\n        with open(filename, \"wb\") as f:\n            f.write(await response.bytes())",
      "metadata": {
        "trusted": true
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "file_name='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/kc_house_data_NaN.csv'",
      "metadata": {
        "trusted": true
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "You will need to download the dataset; if you are running locally, please comment out the following code: \n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "await download(file_name, \"kc_house_data_NaN.csv\")\nfile_name=\"kc_house_data_NaN.csv\"",
      "metadata": {
        "trusted": true
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Use the Pandas method <b>read_csv()</b> to load the data from the web address.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df = pd.read_csv(file_name)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "We use the method <code>head</code> to display the first 5 columns of the dataframe.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.head()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 14,
      "outputs": [
        {
          "execution_count": 14,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   Unnamed: 0          id             date     price  bedrooms  bathrooms  \\\n0           0  7129300520  20141013T000000  221900.0       3.0       1.00   \n1           1  6414100192  20141209T000000  538000.0       3.0       2.25   \n2           2  5631500400  20150225T000000  180000.0       2.0       1.00   \n3           3  2487200875  20141209T000000  604000.0       4.0       3.00   \n4           4  1954400510  20150218T000000  510000.0       3.0       2.00   \n\n   sqft_living  sqft_lot  floors  waterfront  ...  grade  sqft_above  \\\n0         1180      5650     1.0           0  ...      7        1180   \n1         2570      7242     2.0           0  ...      7        2170   \n2          770     10000     1.0           0  ...      6         770   \n3         1960      5000     1.0           0  ...      7        1050   \n4         1680      8080     1.0           0  ...      8        1680   \n\n   sqft_basement  yr_built  yr_renovated  zipcode      lat     long  \\\n0              0      1955             0    98178  47.5112 -122.257   \n1            400      1951          1991    98125  47.7210 -122.319   \n2              0      1933             0    98028  47.7379 -122.233   \n3            910      1965             0    98136  47.5208 -122.393   \n4              0      1987             0    98074  47.6168 -122.045   \n\n   sqft_living15  sqft_lot15  \n0           1340        5650  \n1           1690        7639  \n2           2720        8062  \n3           1360        5000  \n4           1800        7503  \n\n[5 rows x 22 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>id</th>\n      <th>date</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>7129300520</td>\n      <td>20141013T000000</td>\n      <td>221900.0</td>\n      <td>3.0</td>\n      <td>1.00</td>\n      <td>1180</td>\n      <td>5650</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1180</td>\n      <td>0</td>\n      <td>1955</td>\n      <td>0</td>\n      <td>98178</td>\n      <td>47.5112</td>\n      <td>-122.257</td>\n      <td>1340</td>\n      <td>5650</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>6414100192</td>\n      <td>20141209T000000</td>\n      <td>538000.0</td>\n      <td>3.0</td>\n      <td>2.25</td>\n      <td>2570</td>\n      <td>7242</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>2170</td>\n      <td>400</td>\n      <td>1951</td>\n      <td>1991</td>\n      <td>98125</td>\n      <td>47.7210</td>\n      <td>-122.319</td>\n      <td>1690</td>\n      <td>7639</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>5631500400</td>\n      <td>20150225T000000</td>\n      <td>180000.0</td>\n      <td>2.0</td>\n      <td>1.00</td>\n      <td>770</td>\n      <td>10000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>6</td>\n      <td>770</td>\n      <td>0</td>\n      <td>1933</td>\n      <td>0</td>\n      <td>98028</td>\n      <td>47.7379</td>\n      <td>-122.233</td>\n      <td>2720</td>\n      <td>8062</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>2487200875</td>\n      <td>20141209T000000</td>\n      <td>604000.0</td>\n      <td>4.0</td>\n      <td>3.00</td>\n      <td>1960</td>\n      <td>5000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1050</td>\n      <td>910</td>\n      <td>1965</td>\n      <td>0</td>\n      <td>98136</td>\n      <td>47.5208</td>\n      <td>-122.393</td>\n      <td>1360</td>\n      <td>5000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>1954400510</td>\n      <td>20150218T000000</td>\n      <td>510000.0</td>\n      <td>3.0</td>\n      <td>2.00</td>\n      <td>1680</td>\n      <td>8080</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>8</td>\n      <td>1680</td>\n      <td>0</td>\n      <td>1987</td>\n      <td>0</td>\n      <td>98074</td>\n      <td>47.6168</td>\n      <td>-122.045</td>\n      <td>1800</td>\n      <td>7503</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 22 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 1\n\nDisplay the data types of each column using the function dtypes, then take a screenshot and submit it, include your code in the image.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.dtypes",
      "metadata": {
        "trusted": true
      },
      "execution_count": 15,
      "outputs": [
        {
          "execution_count": 15,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Unnamed: 0         int64\nid                 int64\ndate              object\nprice            float64\nbedrooms         float64\nbathrooms        float64\nsqft_living        int64\nsqft_lot           int64\nfloors           float64\nwaterfront         int64\nview               int64\ncondition          int64\ngrade              int64\nsqft_above         int64\nsqft_basement      int64\nyr_built           int64\nyr_renovated       int64\nzipcode            int64\nlat              float64\nlong             float64\nsqft_living15      int64\nsqft_lot15         int64\ndtype: object"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We use the method describe to obtain a statistical summary of the dataframe.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.describe()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 16,
      "outputs": [
        {
          "execution_count": 16,
          "output_type": "execute_result",
          "data": {
            "text/plain": "        Unnamed: 0            id         price      bedrooms     bathrooms  \\\ncount  21613.00000  2.161300e+04  2.161300e+04  21600.000000  21603.000000   \nmean   10806.00000  4.580302e+09  5.400881e+05      3.372870      2.115736   \nstd     6239.28002  2.876566e+09  3.671272e+05      0.926657      0.768996   \nmin        0.00000  1.000102e+06  7.500000e+04      1.000000      0.500000   \n25%     5403.00000  2.123049e+09  3.219500e+05      3.000000      1.750000   \n50%    10806.00000  3.904930e+09  4.500000e+05      3.000000      2.250000   \n75%    16209.00000  7.308900e+09  6.450000e+05      4.000000      2.500000   \nmax    21612.00000  9.900000e+09  7.700000e+06     33.000000      8.000000   \n\n        sqft_living      sqft_lot        floors    waterfront          view  \\\ncount  21613.000000  2.161300e+04  21613.000000  21613.000000  21613.000000   \nmean    2079.899736  1.510697e+04      1.494309      0.007542      0.234303   \nstd      918.440897  4.142051e+04      0.539989      0.086517      0.766318   \nmin      290.000000  5.200000e+02      1.000000      0.000000      0.000000   \n25%     1427.000000  5.040000e+03      1.000000      0.000000      0.000000   \n50%     1910.000000  7.618000e+03      1.500000      0.000000      0.000000   \n75%     2550.000000  1.068800e+04      2.000000      0.000000      0.000000   \nmax    13540.000000  1.651359e+06      3.500000      1.000000      4.000000   \n\n       ...         grade    sqft_above  sqft_basement      yr_built  \\\ncount  ...  21613.000000  21613.000000   21613.000000  21613.000000   \nmean   ...      7.656873   1788.390691     291.509045   1971.005136   \nstd    ...      1.175459    828.090978     442.575043     29.373411   \nmin    ...      1.000000    290.000000       0.000000   1900.000000   \n25%    ...      7.000000   1190.000000       0.000000   1951.000000   \n50%    ...      7.000000   1560.000000       0.000000   1975.000000   \n75%    ...      8.000000   2210.000000     560.000000   1997.000000   \nmax    ...     13.000000   9410.000000    4820.000000   2015.000000   \n\n       yr_renovated       zipcode           lat          long  sqft_living15  \\\ncount  21613.000000  21613.000000  21613.000000  21613.000000   21613.000000   \nmean      84.402258  98077.939805     47.560053   -122.213896    1986.552492   \nstd      401.679240     53.505026      0.138564      0.140828     685.391304   \nmin        0.000000  98001.000000     47.155900   -122.519000     399.000000   \n25%        0.000000  98033.000000     47.471000   -122.328000    1490.000000   \n50%        0.000000  98065.000000     47.571800   -122.230000    1840.000000   \n75%        0.000000  98118.000000     47.678000   -122.125000    2360.000000   \nmax     2015.000000  98199.000000     47.777600   -121.315000    6210.000000   \n\n          sqft_lot15  \ncount   21613.000000  \nmean    12768.455652  \nstd     27304.179631  \nmin       651.000000  \n25%      5100.000000  \n50%      7620.000000  \n75%     10083.000000  \nmax    871200.000000  \n\n[8 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>id</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>21613.00000</td>\n      <td>2.161300e+04</td>\n      <td>2.161300e+04</td>\n      <td>21600.000000</td>\n      <td>21603.000000</td>\n      <td>21613.000000</td>\n      <td>2.161300e+04</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>...</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>10806.00000</td>\n      <td>4.580302e+09</td>\n      <td>5.400881e+05</td>\n      <td>3.372870</td>\n      <td>2.115736</td>\n      <td>2079.899736</td>\n      <td>1.510697e+04</td>\n      <td>1.494309</td>\n      <td>0.007542</td>\n      <td>0.234303</td>\n      <td>...</td>\n      <td>7.656873</td>\n      <td>1788.390691</td>\n      <td>291.509045</td>\n      <td>1971.005136</td>\n      <td>84.402258</td>\n      <td>98077.939805</td>\n      <td>47.560053</td>\n      <td>-122.213896</td>\n      <td>1986.552492</td>\n      <td>12768.455652</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6239.28002</td>\n      <td>2.876566e+09</td>\n      <td>3.671272e+05</td>\n      <td>0.926657</td>\n      <td>0.768996</td>\n      <td>918.440897</td>\n      <td>4.142051e+04</td>\n      <td>0.539989</td>\n      <td>0.086517</td>\n      <td>0.766318</td>\n      <td>...</td>\n      <td>1.175459</td>\n      <td>828.090978</td>\n      <td>442.575043</td>\n      <td>29.373411</td>\n      <td>401.679240</td>\n      <td>53.505026</td>\n      <td>0.138564</td>\n      <td>0.140828</td>\n      <td>685.391304</td>\n      <td>27304.179631</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.00000</td>\n      <td>1.000102e+06</td>\n      <td>7.500000e+04</td>\n      <td>1.000000</td>\n      <td>0.500000</td>\n      <td>290.000000</td>\n      <td>5.200000e+02</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>290.000000</td>\n      <td>0.000000</td>\n      <td>1900.000000</td>\n      <td>0.000000</td>\n      <td>98001.000000</td>\n      <td>47.155900</td>\n      <td>-122.519000</td>\n      <td>399.000000</td>\n      <td>651.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>5403.00000</td>\n      <td>2.123049e+09</td>\n      <td>3.219500e+05</td>\n      <td>3.000000</td>\n      <td>1.750000</td>\n      <td>1427.000000</td>\n      <td>5.040000e+03</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>7.000000</td>\n      <td>1190.000000</td>\n      <td>0.000000</td>\n      <td>1951.000000</td>\n      <td>0.000000</td>\n      <td>98033.000000</td>\n      <td>47.471000</td>\n      <td>-122.328000</td>\n      <td>1490.000000</td>\n      <td>5100.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>10806.00000</td>\n      <td>3.904930e+09</td>\n      <td>4.500000e+05</td>\n      <td>3.000000</td>\n      <td>2.250000</td>\n      <td>1910.000000</td>\n      <td>7.618000e+03</td>\n      <td>1.500000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>7.000000</td>\n      <td>1560.000000</td>\n      <td>0.000000</td>\n      <td>1975.000000</td>\n      <td>0.000000</td>\n      <td>98065.000000</td>\n      <td>47.571800</td>\n      <td>-122.230000</td>\n      <td>1840.000000</td>\n      <td>7620.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>16209.00000</td>\n      <td>7.308900e+09</td>\n      <td>6.450000e+05</td>\n      <td>4.000000</td>\n      <td>2.500000</td>\n      <td>2550.000000</td>\n      <td>1.068800e+04</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>8.000000</td>\n      <td>2210.000000</td>\n      <td>560.000000</td>\n      <td>1997.000000</td>\n      <td>0.000000</td>\n      <td>98118.000000</td>\n      <td>47.678000</td>\n      <td>-122.125000</td>\n      <td>2360.000000</td>\n      <td>10083.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>21612.00000</td>\n      <td>9.900000e+09</td>\n      <td>7.700000e+06</td>\n      <td>33.000000</td>\n      <td>8.000000</td>\n      <td>13540.000000</td>\n      <td>1.651359e+06</td>\n      <td>3.500000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>...</td>\n      <td>13.000000</td>\n      <td>9410.000000</td>\n      <td>4820.000000</td>\n      <td>2015.000000</td>\n      <td>2015.000000</td>\n      <td>98199.000000</td>\n      <td>47.777600</td>\n      <td>-121.315000</td>\n      <td>6210.000000</td>\n      <td>871200.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# Module 2: Data Wrangling\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Question 2\n\nDrop the columns <code>\"id\"</code>  and <code>\"Unnamed: 0\"</code> from axis 1 using the method <code>drop()</code>, then use the method <code>describe()</code> to obtain a statistical summary of the data. Take a screenshot and submit it, make sure the <code>inplace</code> parameter is set to <code>True</code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df=pd.read_csv(file_name)\ndf.drop([\"id\", \"Unnamed: 0\"],axis=1, inplace = True)\ndf.describe() ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 19,
      "outputs": [
        {
          "execution_count": 19,
          "output_type": "execute_result",
          "data": {
            "text/plain": "              price      bedrooms     bathrooms   sqft_living      sqft_lot  \\\ncount  2.161300e+04  21600.000000  21603.000000  21613.000000  2.161300e+04   \nmean   5.400881e+05      3.372870      2.115736   2079.899736  1.510697e+04   \nstd    3.671272e+05      0.926657      0.768996    918.440897  4.142051e+04   \nmin    7.500000e+04      1.000000      0.500000    290.000000  5.200000e+02   \n25%    3.219500e+05      3.000000      1.750000   1427.000000  5.040000e+03   \n50%    4.500000e+05      3.000000      2.250000   1910.000000  7.618000e+03   \n75%    6.450000e+05      4.000000      2.500000   2550.000000  1.068800e+04   \nmax    7.700000e+06     33.000000      8.000000  13540.000000  1.651359e+06   \n\n             floors    waterfront          view     condition         grade  \\\ncount  21613.000000  21613.000000  21613.000000  21613.000000  21613.000000   \nmean       1.494309      0.007542      0.234303      3.409430      7.656873   \nstd        0.539989      0.086517      0.766318      0.650743      1.175459   \nmin        1.000000      0.000000      0.000000      1.000000      1.000000   \n25%        1.000000      0.000000      0.000000      3.000000      7.000000   \n50%        1.500000      0.000000      0.000000      3.000000      7.000000   \n75%        2.000000      0.000000      0.000000      4.000000      8.000000   \nmax        3.500000      1.000000      4.000000      5.000000     13.000000   \n\n         sqft_above  sqft_basement      yr_built  yr_renovated       zipcode  \\\ncount  21613.000000   21613.000000  21613.000000  21613.000000  21613.000000   \nmean    1788.390691     291.509045   1971.005136     84.402258  98077.939805   \nstd      828.090978     442.575043     29.373411    401.679240     53.505026   \nmin      290.000000       0.000000   1900.000000      0.000000  98001.000000   \n25%     1190.000000       0.000000   1951.000000      0.000000  98033.000000   \n50%     1560.000000       0.000000   1975.000000      0.000000  98065.000000   \n75%     2210.000000     560.000000   1997.000000      0.000000  98118.000000   \nmax     9410.000000    4820.000000   2015.000000   2015.000000  98199.000000   \n\n                lat          long  sqft_living15     sqft_lot15  \ncount  21613.000000  21613.000000   21613.000000   21613.000000  \nmean      47.560053   -122.213896    1986.552492   12768.455652  \nstd        0.138564      0.140828     685.391304   27304.179631  \nmin       47.155900   -122.519000     399.000000     651.000000  \n25%       47.471000   -122.328000    1490.000000    5100.000000  \n50%       47.571800   -122.230000    1840.000000    7620.000000  \n75%       47.678000   -122.125000    2360.000000   10083.000000  \nmax       47.777600   -121.315000    6210.000000  871200.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>2.161300e+04</td>\n      <td>21600.000000</td>\n      <td>21603.000000</td>\n      <td>21613.000000</td>\n      <td>2.161300e+04</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.400881e+05</td>\n      <td>3.372870</td>\n      <td>2.115736</td>\n      <td>2079.899736</td>\n      <td>1.510697e+04</td>\n      <td>1.494309</td>\n      <td>0.007542</td>\n      <td>0.234303</td>\n      <td>3.409430</td>\n      <td>7.656873</td>\n      <td>1788.390691</td>\n      <td>291.509045</td>\n      <td>1971.005136</td>\n      <td>84.402258</td>\n      <td>98077.939805</td>\n      <td>47.560053</td>\n      <td>-122.213896</td>\n      <td>1986.552492</td>\n      <td>12768.455652</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.671272e+05</td>\n      <td>0.926657</td>\n      <td>0.768996</td>\n      <td>918.440897</td>\n      <td>4.142051e+04</td>\n      <td>0.539989</td>\n      <td>0.086517</td>\n      <td>0.766318</td>\n      <td>0.650743</td>\n      <td>1.175459</td>\n      <td>828.090978</td>\n      <td>442.575043</td>\n      <td>29.373411</td>\n      <td>401.679240</td>\n      <td>53.505026</td>\n      <td>0.138564</td>\n      <td>0.140828</td>\n      <td>685.391304</td>\n      <td>27304.179631</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>7.500000e+04</td>\n      <td>1.000000</td>\n      <td>0.500000</td>\n      <td>290.000000</td>\n      <td>5.200000e+02</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>290.000000</td>\n      <td>0.000000</td>\n      <td>1900.000000</td>\n      <td>0.000000</td>\n      <td>98001.000000</td>\n      <td>47.155900</td>\n      <td>-122.519000</td>\n      <td>399.000000</td>\n      <td>651.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.219500e+05</td>\n      <td>3.000000</td>\n      <td>1.750000</td>\n      <td>1427.000000</td>\n      <td>5.040000e+03</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>7.000000</td>\n      <td>1190.000000</td>\n      <td>0.000000</td>\n      <td>1951.000000</td>\n      <td>0.000000</td>\n      <td>98033.000000</td>\n      <td>47.471000</td>\n      <td>-122.328000</td>\n      <td>1490.000000</td>\n      <td>5100.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.500000e+05</td>\n      <td>3.000000</td>\n      <td>2.250000</td>\n      <td>1910.000000</td>\n      <td>7.618000e+03</td>\n      <td>1.500000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>7.000000</td>\n      <td>1560.000000</td>\n      <td>0.000000</td>\n      <td>1975.000000</td>\n      <td>0.000000</td>\n      <td>98065.000000</td>\n      <td>47.571800</td>\n      <td>-122.230000</td>\n      <td>1840.000000</td>\n      <td>7620.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>6.450000e+05</td>\n      <td>4.000000</td>\n      <td>2.500000</td>\n      <td>2550.000000</td>\n      <td>1.068800e+04</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>8.000000</td>\n      <td>2210.000000</td>\n      <td>560.000000</td>\n      <td>1997.000000</td>\n      <td>0.000000</td>\n      <td>98118.000000</td>\n      <td>47.678000</td>\n      <td>-122.125000</td>\n      <td>2360.000000</td>\n      <td>10083.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7.700000e+06</td>\n      <td>33.000000</td>\n      <td>8.000000</td>\n      <td>13540.000000</td>\n      <td>1.651359e+06</td>\n      <td>3.500000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>5.000000</td>\n      <td>13.000000</td>\n      <td>9410.000000</td>\n      <td>4820.000000</td>\n      <td>2015.000000</td>\n      <td>2015.000000</td>\n      <td>98199.000000</td>\n      <td>47.777600</td>\n      <td>-121.315000</td>\n      <td>6210.000000</td>\n      <td>871200.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can see we have missing values for the columns <code> bedrooms</code>  and <code> bathrooms </code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 20,
      "outputs": [
        {
          "name": "stdout",
          "text": "number of NaN values for the column bedrooms : 13\nnumber of NaN values for the column bathrooms : 10\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can replace the missing values of the column <code>'bedrooms'</code> with the mean of the column  <code>'bedrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code>inplace</code> parameter to <code>True</code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "mean=df['bedrooms'].mean()\ndf['bedrooms'].replace(np.nan,mean, inplace=True)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "We also replace the missing values of the column <code>'bathrooms'</code> with the mean of the column  <code>'bathrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code> inplace </code>  parameter top <code> True </code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "mean=df['bathrooms'].mean()\ndf['bathrooms'].replace(np.nan,mean, inplace=True)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())",
      "metadata": {
        "trusted": true
      },
      "execution_count": 23,
      "outputs": [
        {
          "name": "stdout",
          "text": "number of NaN values for the column bedrooms : 0\nnumber of NaN values for the column bathrooms : 0\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# Module 3: Exploratory Data Analysis\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Question 3\n\nUse the method <code>value_counts</code> to count the number of houses with unique floor values, use the method <code>.to_frame()</code> to convert it to a dataframe.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "floor_count=df['floors'] .value_counts() .to_frame()\nfloor_count.rename(columns={'floors':'value_counts'}, inplace= True)\nfloor_count\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 27,
      "outputs": [
        {
          "execution_count": 27,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     value_counts\n1.0         10680\n2.0          8241\n1.5          1910\n3.0           613\n2.5           161\n3.5             8",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>value_counts</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1.0</th>\n      <td>10680</td>\n    </tr>\n    <tr>\n      <th>2.0</th>\n      <td>8241</td>\n    </tr>\n    <tr>\n      <th>1.5</th>\n      <td>1910</td>\n    </tr>\n    <tr>\n      <th>3.0</th>\n      <td>613</td>\n    </tr>\n    <tr>\n      <th>2.5</th>\n      <td>161</td>\n    </tr>\n    <tr>\n      <th>3.5</th>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 4\n\nUse the function <code>boxplot</code> in the seaborn library  to  determine whether houses with a waterfront view or without a waterfront view have more price outliers.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.boxplot(x= 'waterfront', y='price', data=df, palette=\"Set3\") ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 36,
      "outputs": [
        {
          "execution_count": 36,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='waterfront', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "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f/rTn7rXXXedu3fvXvfAgQOu67quJDcrK8t9+umn3Z07d7pffPGF+6c//cnt0qWL+/jjj7vbtm1zH374YTc5Odl96623wj9DknvmmWe6L7zwgrtjxw73tttuc9PS0tx9+/a5R44ccV955RVXkrtt27aInwcguigqACJceOGF7sKFC13Xdd3Jkye7CxYscD0ej3vw4EH3yy+/dCW527dvb/GxV111lftf//Vf4e/HjRvn3n777RHb3H///W5BQUHEuurq6nApOPq4Cy64oNnzX3PNNe6MGTMi1klyZ8+eHbHuJz/5ifvLX/4yYt2UKVPcK6+8MuJxd911V/j7hoYGV5L7+uuvu67rum+//bYryf3uu+9a/F0BRAeHfgBEGDdunFavXi3XdfW3v/1N1157rQYPHqy///3vWrNmjXJycjRgwAA1NTXp/vvvV35+vjIyMpSWlqby8nLt2bOn1ef/6KOP9PbbbystLS28DBo0SJK0c+fO8HYjRoxoc+aRI0dGfF9VVaWxY8dGrBs7dqyqqqoi1g0bNiz8dWpqqtLT01VXV9fmnwvg1ONkWgARxo8fr6efflofffSRunTpokGDBmn8+PFavXq1vvvuO40bN06StHDhQj3yyCNatGiR8vPzlZqaqtmzZysYDLb6/A0NDbr66qv14IMPNhvr06dP+OvU1NQ2Zz6ZbY/145NuHcdRKBRq13MBODXYowIgwqWXXqqDBw/qd7/7XbiUHC0qq1ev1vjx4yVJ69at0zXXXKPrr79ew4cP1znnnNPskmGPxxM+MfeoCy+8UFu2bFG/fv107rnnRiztLRw/NnjwYK1bty5i3bp16zRkyJA2P4fH45GkZvkBRBdFBUCE008/XcOGDdPzzz8fLiWXXXaZNm3apO3bt4fLy4ABA/TGG2/onXfeUVVVlf7jP/5DtbW1Ec/Vr18/vffee9q9e7e+/fZbhUIhFRUVaf/+/Zo2bZo2bNignTt3qry8XDfddFOnlYLf/OY3WrZsmRYvXqwdO3aotLRUf/rTn3THHXe0+TnOOussOY6j1157Td98840aGho6JRuAk0NRAdDMuHHj1NTUFC4qGRkZGjJkiHr37q2BAwdKku666y5deOGFKiws1Pjx49W7d29Nnjw54nnuuOMOJScna8iQIcrMzNSePXuUk5OjdevWqampSQUFBcrPz9fs2bN12mmnKSmpc96SJk+erEceeUQPPfSQ8vLy9MQTT2jp0qXh36ctzjjjDM2fP19z585Vdna2Zs2a1SnZAJwcx3Vd13QIAACAlrBHBQAAWIuiAgAArEVRAQAA1qKoAAAAa1FUAACAtSgqAADAWhQVAABgLYoKAACwFkUFAABYi6ICAACsRVEBAADWoqgAAABr/T9wKkddT5BHcAAAAABJRU5ErkJggg=="
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 5\n\nUse the function <code>regplot</code>  in the seaborn library  to  determine if the feature <code>sqft_above</code> is negatively or positively correlated with price.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.regplot(x='sqft_above', y='price', data=df,)\nplt.ylim(0,)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 37,
      "outputs": [
        {
          "execution_count": 37,
          "output_type": "execute_result",
          "data": {
            "text/plain": "(0.0, 8081250.0)"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "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"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can use the Pandas method <code>corr()</code>  to find the feature other than price that is most correlated with price.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.corr()['price'].sort_values()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 38,
      "outputs": [
        {
          "execution_count": 38,
          "output_type": "execute_result",
          "data": {
            "text/plain": "zipcode         -0.053203\nlong             0.021626\ncondition        0.036362\nyr_built         0.054012\nsqft_lot15       0.082447\nsqft_lot         0.089661\nyr_renovated     0.126434\nfloors           0.256794\nwaterfront       0.266369\nlat              0.307003\nbedrooms         0.308797\nsqft_basement    0.323816\nview             0.397293\nbathrooms        0.525738\nsqft_living15    0.585379\nsqft_above       0.605567\ngrade            0.667434\nsqft_living      0.702035\nprice            1.000000\nName: price, dtype: float64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# Module 4: Model Development\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can Fit a linear regression model using the  longitude feature <code>'long'</code> and  caculate the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "X = df[['long']]\nY = df['price']\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X, Y)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 39,
      "outputs": [
        {
          "execution_count": 39,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.00046769430149007363"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question  6\n\nFit a linear regression model to predict the <code>'price'</code> using the feature <code>'sqft_living'</code> then calculate the R^2. Take a screenshot of your code and the value of the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "X= df[['sqft_living']]\nY= df[['price']]\nlm= LinearRegression()\nlm.fit(X,Y)\nprint(' R square is:',lm.score(X,Y))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 45,
      "outputs": [
        {
          "name": "stdout",
          "text": " R square is: 0.4928532179037931\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 7\n\nFit a linear regression model to predict the <code>'price'</code> using the list of features:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "features =df[[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]]\nprice =df[[\"price\"]]\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Then calculate the R^2. Take a screenshot of your code.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "lm=LinearRegression()\nlm.fit(features,price)\nprint('R square is:', lm.score(features,price))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 48,
      "outputs": [
        {
          "name": "stdout",
          "text": "R square is: 0.6576890354915759\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### This will help with Question 8\n\nCreate a list of tuples, the first element in the tuple contains the name of the estimator:\n\n<code>'scale'</code>\n\n<code>'polynomial'</code>\n\n<code>'model'</code>\n\nThe second element in the tuple  contains the model constructor\n\n<code>StandardScaler()</code>\n\n<code>PolynomialFeatures(include_bias=False)</code>\n\n<code>LinearRegression()</code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]",
      "metadata": {
        "trusted": true
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "### Question 8\n\nUse the list to create a pipeline object to predict the 'price', fit the object using the features in the list <code>features</code>, and calculate the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pipe = Pipeline (Input)\npipe.fit(features,price)\npipe.score(features,price)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 60,
      "outputs": [
        {
          "execution_count": 60,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.7512398529081656"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# Module 5: Model Evaluation and Refinement\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Import the necessary modules:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nprint(\"done\")",
      "metadata": {
        "trusted": true
      },
      "execution_count": 61,
      "outputs": [
        {
          "name": "stdout",
          "text": "done\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We will split the data into training and testing sets:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]    \nX = df[features]\nY = df['price']\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)\n\n\nprint(\"number of test samples:\", x_test.shape[0])\nprint(\"number of training samples:\",x_train.shape[0])",
      "metadata": {
        "trusted": true
      },
      "execution_count": 62,
      "outputs": [
        {
          "name": "stdout",
          "text": "number of test samples: 3242\nnumber of training samples: 18371\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 9\n\nCreate and fit a Ridge regression object using the training data, set the regularization parameter to 0.1, and calculate the R^2 using the test data.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from sklearn.linear_model import Ridge",
      "metadata": {
        "trusted": true
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "RidgeModel= Ridge(alpha=0.1)\nRidgeModel.fit(x_train,y_train)\nRidgeModel.score(x_test,y_test)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 64,
      "outputs": [
        {
          "execution_count": 64,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.647875916393906"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 10\n\nPerform a second order polynomial transform on both the training data and testing data. Create and fit a Ridge regression object using the training data, set the regularisation parameter to 0.1, and calculate the R^2 utilising the test data provided. Take a screenshot of your code and the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pf=PolynomialFeatures(degree=2)\nx_train_pf=pf.fit_transform(x_train)\nx_test_pf=pf.fit_transform(x_test)\nRidgeModel.fit(x_train_pf,y_train)\nRidgeModel.score(x_train_pf,y_train)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": [
        {
          "execution_count": 66,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.7418167438691949"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Once you complete your notebook you will have to share it. Select the icon on the top right a marked in red in the image below, a dialogue box should open, and select the option all&nbsp;content excluding sensitive code cells.</p>\n        <p><img width=\"600\" src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/images/share_notebook.png\" alt=\"share notebook\" style=\"display: block; margin-left: auto; margin-right: auto;\"></p>\n        <p></p>\n        <p>You can then share the notebook&nbsp; via a&nbsp; URL by scrolling down as shown in the following image:</p>\n        <p style=\"text-align: center;\"><img width=\"600\" src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/images/url_notebook.png\" alt=\"HTML\" style=\"display: block; margin-left: auto; margin-right: auto;\"></p>\n        <p>&nbsp;</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2>About the Authors:</h2> \n\n<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Other contributors: <a href=\"https://www.linkedin.com/in/michelleccarey/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Michelle Carey</a>, <a href=\"https://www.linkedin.com/in/jiahui-mavis-zhou-a4537814a?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Mavis Zhou</a>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "## Change Log\n\n| Date (YYYY-MM-DD) | Version | Changed By      | Change Description                           |\n| ----------------- | ------- | --------------- | -------------------------------------------- |\n| 2020-12-01        | 2.2     | Aije Egwaikhide | Coverted Data describtion from text to table |\n| 2020-10-06        | 2.1     | Lakshmi Holla   | Changed markdown instruction of Question1    |\n| 2020-08-27        | 2.0     | Malika Singla   | Added lab to GitLab                          |\n\n<hr>\n\n## <h3 align=\"center\"> © IBM Corporation 2020. All rights reserved. <h3/>\n\n<p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}